<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.0</version>
        <relativePath/> <!-- lookup parent from repository -->
        <!-- Define el proyecto padre, en este caso el starter parent de Spring Boot, del cual extrae muchas caracteristicas,
        simplificando las configuraciones   -->
    </parent>

    <groupId>ar.com.cdt</groupId>
    <artifactId>6classroom-entidadesRelacionadasManyToMany</artifactId>
    <version>1</version>
    <name>6classroom-entidadesRelacionadasManyToMany</name>
    <description>Demo project for Spring Boot</description>

    <properties>
        <java.version>21</java.version>
    </properties>

    <dependencies>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <!-- Por default, lo basico de Spring: Tomcat, que es el servidor embebido, configura el manejo de solicitudes
            http y sus respuestas, es decir se encarga de enrutar las solicitudes a los controladores correctos, configura
            vistas y modelos, configura Jackson para la Serializacion y Deserializacion JSON automatica, lo cual permite
            comunicarse con otros lenguajes, por ejemplo: Java - Json - Javascript, etc.    -->
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
            <!-- Permite los reinicios del servidor de forma automatica al guardar los cambios. Pero acordate de activar
            en el proyecto el 'Compile on Save' -->
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
            <!-- Simplifica codigo mediante anotaciones, por ejemplos los getters and setters dentro de una Entidad -->
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <!-- Dependencia para testing - JUnit para hacer pruebas -->
        </dependency>
        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
            <!--Simplifica las conexiones a las BBDD-->
        </dependency>
        
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
            <!--Los drivers de la BBDD MySQL-->
        </dependency>
        
        <!-- SWAGGER -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.5.0</version>
        </dependency>
        <!--Springdoc OpenAPI es una biblioteca, anteriormente conocida como Swagger, que se hizo especificamente para las API RESTful desarrolladas con Spring Boot.
        Esta dependencia, genera automáticamente la documentación de los endpoints RESTful en formato OpenAPI, lo que permite entender y consumir APIs de manera más sencilla.
        Incluye una interfaz gráfica basada en Swagger UI que permite a los usuarios interactuar con los endpoints directamente desde un navegador web, evitando la necesidad de
        usar Postman. 
        Para acceder a la interfaz: Hay que tener corriendo la app, y en el navegador ir a http://localhost:8080/swagger-ui.html - Si cambié el puerto default, cambia acá también.      
        Funciones principales:
        **Visualización de Endpoints: Muestra una lista de todos los endpoints disponibles en la API, clasificados por controlador.
        Cada endpoint incluye información sobre su método (GET, POST, PUT, DELETE), la URL del recurso, y los parámetros necesarios. 
        Aparentemente el criterio de orden, es por lo más usado según Swagger. Y se podrían llegar a ordenar de otra forma con configs, pero no lo quiero complicar por ahora.
        **Pruebas Interactivas: Se pueden probar los endpoints directamente desde la interfaz. Swagger genera formularios en los que se puede ingresar los datos necesarios 
        (parámetros de consulta, cuerpo de la petición, etc.), y luego envía la solicitud a la API.
        Documentación Automática: Proporciona descripciones detalladas sobre cada endpoint, incluyendo los tipos de respuesta, códigos de estado HTTP, y ejemplos de datos de entrada y salida.
        Para ver esto hay que ir a http://localhost:8080/v3/api-docs para el formato JSON, o a http://localhost:8080/v3/api-docs.yaml para obtenerlo en formato YAML.
        Con el archivo JSON o YAML, se pueden usar herramientas como Swagger Editor, SwaggerHub o Redoc para generar documentación formal, que se puede descargar en formatos PDF, HTML, etc.
        Soporte para Autenticación: Si la API requiere autenticación (JWT, OAuth, etc.), Swagger UI permite ingresar el token necesario para realizar pruebas en endpoints protegidos.
        Esquemas de Datos: Swagger muestra los modelos (schemas) que definen la estructura de los datos que la API utiliza, para que se pueda entender claramente el formato esperado en las
        solicitudes y respuestas.
        Para que la interfaz de Swagger sea accesible para otra persona desde otra pc (fuera de mi red, sino bastaría con reemplazar localhost por la IP local) tendria que subir el proyecto
        a un servidor como Heroku, y cualquiera con la dirección del servidor podría ingresar. -->
        
        
        <!--SPRING SECURITY
        Es un framework que protege las apps asegurando que solo usuarios autorizados puedan acceder a recursos, y restringiendo qué acciones pueden realizar.
        Autenticación: Verifica la identidad de un usuario.
        Autorización: Controla qué usuarios tienen acceso a qué recursos.
        Protección contra amenazas comunes: Como CSRF, ataques de fuerza bruta, etc.
        La siguiente dependencia contiene lo básico para proteger los endpoints de la API.
        Con ella pide usuario y password antes de mostrar Swagger, tira Unauthorized al tratar de acceder por PUT POST DELETE, pero muestra los GET. Esto es normal, porque
        para ocultarlos ya hay que entrar a configurar.-->
        <dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-security</artifactId>
	</dependency>
        <!--
        La distinción entre Servlet y Reactive en el contexto de aplicaciones web y APIs se refiere a cómo se manejan las solicitudes y respuestas, 
        y a las arquitecturas subyacentes que utilizan.

        Servlet
        
        Qué es:
        Servlet es una tecnología de Java utilizada para manejar solicitudes y respuestas en aplicaciones web basadas en el modelo de servlet-container. 
        Este modelo sigue una arquitectura sincrónica y basada en hilos, donde cada solicitud se maneja en un hilo separado.
        
        Cómo se maneja:
        Cada solicitud es atendida por un hilo independiente del servidor. El servidor asigna un hilo para cada solicitud, lo que puede llevar a problemas 
        de escalabilidad bajo alta carga si hay muchos usuarios concurrentes.
        
        Cómo saber si tu app es Servlet:
        Revisa las dependencias en tu pom.xml o build.gradle. Si ves dependencias relacionadas con Spring MVC (por ejemplo, spring-boot-starter-web), es
        probable que tu aplicación esté basada en el modelo Servlet.
        La configuración por defecto en Spring Boot sin configuraciones específicas para Reactive es generalmente basada en Servlet.
        
        
        Tu aplicación Servlet utiliza el modelo tradicional de manejo de solicitudes y respuestas web basado en hilos. Esto implica:

        Modelo Sincrónico: Cada solicitud entrante es gestionada por un hilo independiente. La solicitud se procesa de manera secuencial, 
        y el hilo permanece bloqueado hasta que se complete la respuesta.

        Escalabilidad: Bajo alta demanda, este modelo puede generar problemas de escalabilidad, ya que cada solicitud requiere un hilo separado. 
        Si hay muchas solicitudes concurrentes, puede llegar a agotarse el pool de hilos.

        Framework: Tu aplicación probablemente usa Spring MVC, el cual está basado en el modelo Servlet y es ideal para aplicaciones que no 
        necesiten manejar miles de conexiones simultáneas o flujos reactivos.

        Implicaciones:
        Fácil de entender y mantener para la mayoría de las aplicaciones web tradicionales.
        Es posible que consuma más recursos (hilos) bajo alta carga en comparación con una aplicación Reactive.
        Esto se adapta bien para aplicaciones web con carga moderada, donde el modelo sincrónico es suficiente para el manejo de solicitudes.
        -->
    </dependencies>

    <build>
        <plugins>
            <!-- Sección de configuración de plugins de Maven -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <!-- Plugin de Maven para Spring Boot, facilita la construcción y ejecución del proyecto -->
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <!-- Excluye Lombok del paquete final -->
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>

